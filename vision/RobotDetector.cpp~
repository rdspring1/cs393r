#include <vision/RobotDetector.h>

using namespace Eigen;

RobotDetector::RobotDetector(DETECTOR_DECLARE_ARGS, Classifier*& classifier, BlobDetector*& blob_detector) :
  DETECTOR_INITIALIZE, classifier_(classifier), blob_detector_(blob_detector) { 
}

std::list<Blob*> RobotDetector::getPinkRobots() {
  return std::list<Blob*>();
}

std::list<Blob*> RobotDetector::getBlueRobots() {
  return std::list<Blob*>();
}

void RobotDetector::detectRobot()
{
	int imageX, imageY;
	bool seen;
	float radius;
    WorldObject* robot = &vblocks_.world_object->objects_[WO_OPPONENT1];
	findRobot(imageX, imageY, seen, radius);
	if(!robot ->seen)
	{
		robot ->imageCenterX = imageX;
		robot ->imageCenterY = imageY;
		robot ->seen = seen;
		robot ->radius = radius;

		Position p = cmatrix_.getWorldPosition(imageX, imageY);
		robot ->visionBearing = cmatrix_.bearing(p);
		robot ->visionElevation = cmatrix_.elevation(p);
		robot ->visionDistance = cmatrix_.groundDistance(p);
	}
}

void RobotDetector::findRobot(int& imageX, int& imageY, bool& seen, float& radius)
{
  seen = false;
  blob_detector_->formBlobs(c_PINK);
  double maxArea = 0.0;
  BlobCollection blobs = blob_detector_->horizontalBlob[c_PINK];
  if(blobs.size() > 0) {
    seen = true;
    BlobCollection merged = blob_detector_->mergeBlobs(blobs, 20, 30);
    printf("found robot blobs %i blobs\n", blobs.size());
    for(int i = 0; i < merged.size(); i++) {
      Blob& b = merged[i];

	double area = std::abs(b.xi - b.xf) * std::abs(b.yi - b.yf);
      if (area > maxArea)
      {
         imageX = merged[i].avgX;
         imageY = merged[i].avgY;
         Position p = cmatrix_.getWorldPosition(blobs[i].avgX, blobs[i].avgY);
         maxArea = area;
	     radius = p.x;
         //printf("*** blue X %2.2f  blueY %2.2f\n", p.x, p.y);
      }
      ///printf("blob %i is centered at %i, %i, in bounding box (%i,%i) to (%i,%i)\n",
      ///i, b.avgX, b.avgY, b.xi, b.yi, b.xf, b.yf);
     }//for
   //radius = maxArea;
   Position p = cmatrix_.getWorldPosition(imageX, imageY);
   printf("Robot: %2.2f %2.2f\n", p.x, p.y);
   


   }	
}
