#include "BallDetector.h"
#include "BlobDetector.h"
//#include "KalmanFilter.h"
#include <cmath>
#define BALLTHRESHOLD 30 //40
#define SSQ 8

using namespace Eigen;

#define getball() (&vblocks_.world_object->objects_[WO_BALL])
#define getself() (&vblocks_.world_object->objects_[vblocks_.robot_state->WO_SELF])
#define getframe() vblocks_.frame_info->frame_id

BallDetector::BallDetector(DETECTOR_DECLARE_ARGS, Classifier*& classifier, BlobDetector*& blob_detector) : DETECTOR_INITIALIZE, classifier_(classifier), blob_detector_(blob_detector), kfilter() {
	candidateCount = 0;
}

void BallDetector::detectBall()
{
    int imageX, imageY;
    float xc, yc, radius;
	bool seen;
	WorldObject* ball = &vblocks_.world_object->objects_[WO_BALL];
  
	if(!ball->seen)
	{
        	//       pixels  pixels  bool  mm  mm  
		findBall(imageX, imageY, seen, xc, yc, radius);
		ball->imageCenterX = imageX;
		ball->imageCenterY = imageY;
		ball->seen = seen;

		Position p = cmatrix_.getWorldPosition(imageX, imageY);
		ball->visionBearing = cmatrix_.bearing(p);
		ball->visionElevation = cmatrix_.elevation(p);
		ball->visionDistance = cmatrix_.groundDistance(p);
        	ball->width = yc; //p.x;
        	ball->height = xc; //p.y;
        	ball->radius = radius;
	}
    
    /*WorldObject* penaltyLine = &vblocks_.world_object->objects_[WO_OPP_PENALTY];
    findBall(imageX, imageY, seen);*/
}

void BallDetector::findBall(int& imageX, int& imageY, bool& seen, float& xc, float&yc, float& radius)
{
    blob_detector_->formBlobs(c_ORANGE);
    BlobCollection blobs = blob_detector_->mergeBlobs(blob_detector_->horizontalBlob[c_ORANGE], 20, 30);
    int valX = 0.0f;
    int valY = 0.0f;
    double maxArea = 0.0;
    if(blobs.size() > 0) 
    {
        for(unsigned i = 0; i < blobs.size(); ++i) 
        {
              Blob& b = blobs[i];
              //printf("blob %i is centered at %i, %i, in bounding box (%i,%i) to (%i,%i)\n", i, b.avgX, b.avgY, b.xi, b.yi, b.xf, b.yf);
              double area = std::abs(b.xi - b.xf) * std::abs(b.yi - b.yf);
              if (area > maxArea)
              {
                 valX = blobs[i].avgX;
                 valY = blobs[i].avgY;
                 maxArea = area;
              }
        }
        if(maxArea > 40)
        {
            seen = true;
            // world position coordinate x y the y
            Position p = cmatrix_.getWorldPosition(valX, valY);
         }
    }
}
